package com.ssepan.mvcform;

//import java.awt.*;
//import javax.swing.*;
//import java.util.logging.*;
import com.ssepan.utility.*;
import com.ssepan.application.mvvm.*;
import com.ssepan.mvclibrary.*;
import java.beans.*;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import javax.swing.WindowConstants;
//import javax.swing.*;
/**
 *
 * @author ssepan
 */
public class MainView
    extends javax.swing.JFrame
    implements PropertyChangeListener
{
    
    // <editor-fold defaultstate="collapsed" desc="Declarations">
    public static Integer RETURNCODE_INCOMPLETE = -1;
    public static Integer RETURNCODE_COMPLETE = 0;
    //public static Integer RETURNCODE_SOMEPROBLEM = 1;

    //Because MainView contains the entry point, it will contains the return code definitions and call System.exit()
    public static Integer returnValue;
    
    private MvcModel objModel ;
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Constructor">
    /** Creates new form MainView */
    public MainView()  {
        String sStatusMessage="";
        String sErrorMessage="";

        initComponents();
        
        try {
            MainView.returnValue = RETURNCODE_INCOMPLETE;  //default to Incomplete code

            Log.setPackageName("com.ssepan.mvcform");
            
            //this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            

        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            //Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }

    // </editor-fold>
    
    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StatusBar = new javax.swing.JPanel();
        StatusMessage = new javax.swing.JLabel();
        ErrorMessage = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();
        DirtyIconButton = new javax.swing.JButton();
        ActionIconButton = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        FileNewButton = new javax.swing.JButton();
        FileOpenButton = new javax.swing.JButton();
        FileSaveButton = new javax.swing.JButton();
        FilePrintButton = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        EditUndoButton = new javax.swing.JButton();
        EditRedoButton = new javax.swing.JButton();
        EditCutButton = new javax.swing.JButton();
        EditCopyButton = new javax.swing.JButton();
        EditPasteButton = new javax.swing.JButton();
        EditFindButton = new javax.swing.JButton();
        EditReplaceButton = new javax.swing.JButton();
        EditRefreshButton = new javax.swing.JButton();
        EditPropertiesButton = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        HelpHelpContentsButton = new javax.swing.JButton();
        SomeStringLabel = new javax.swing.JLabel();
        SomeIntegerLabel = new javax.swing.JLabel();
        SomeStringTextField = new javax.swing.JTextField();
        SomeIntegerTextField = new javax.swing.JTextField();
        SomeBooleanCheckBox = new javax.swing.JCheckBox();
        SomeBooleanLabel = new javax.swing.JLabel();
        MainMenu = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        FileNewMenuItem = new javax.swing.JMenuItem();
        FileOpenMenuItem = new javax.swing.JMenuItem();
        FileSaveMenuItem = new javax.swing.JMenuItem();
        FileSaveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        FilePrintMenuItem = new javax.swing.JMenuItem();
        FilePrintSetupMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        FileExitMenuItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        EditUndoMenuItem = new javax.swing.JMenuItem();
        EditRedoMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        EditSelectAllMenuItem = new javax.swing.JMenuItem();
        EditCutMenuItem = new javax.swing.JMenuItem();
        EditCopyMenuItem = new javax.swing.JMenuItem();
        EditPasteMenuItem = new javax.swing.JMenuItem();
        EditPasteSpecialMenuItem = new javax.swing.JMenuItem();
        EditDeleteMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        EditFindMenuItem = new javax.swing.JMenuItem();
        EditReplaceMenuItem = new javax.swing.JMenuItem();
        EditGoToMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        EditRefreshMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        EditPreferencesMenuItem = new javax.swing.JMenuItem();
        EditPropertiesMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        WindowMenu = new javax.swing.JMenu();
        WindowNewWindowMenuItem = new javax.swing.JMenuItem();
        WindowTileMenuItem = new javax.swing.JMenuItem();
        WindowCascadeMenuItem = new javax.swing.JMenuItem();
        WindowArrangeAllMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        WindowHideMenuItem = new javax.swing.JMenuItem();
        WindowShowMenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpHelpContentsMenuItem = new javax.swing.JMenuItem();
        HelpHelpIndexMenuItem = new javax.swing.JMenuItem();
        HelpHelpOnHelpMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        HelpLicenceInformationMenuItem = new javax.swing.JMenuItem();
        HelpCheckForUpdatesMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        HelpAboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MvcForm");
        setName("MvcFormFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        StatusBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        StatusBar.setPreferredSize(new java.awt.Dimension(311, 44));

        StatusMessage.setForeground(new java.awt.Color(0, 128, 0));

        ErrorMessage.setForeground(new java.awt.Color(255, 0, 0));

        ProgressBar.setEnabled(false);
        ProgressBar.setPreferredSize(new java.awt.Dimension(150, 22));

        DirtyIconButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Save.png"))); // NOI18N
        DirtyIconButton.setToolTipText("dirty");
        DirtyIconButton.setEnabled(false);
        DirtyIconButton.setMaximumSize(new java.awt.Dimension(22, 22));
        DirtyIconButton.setMinimumSize(new java.awt.Dimension(22, 22));
        DirtyIconButton.setName("DirtyIconButton"); // NOI18N
        DirtyIconButton.setPreferredSize(new java.awt.Dimension(22, 22));

        ActionIconButton.setToolTipText("action");
        ActionIconButton.setEnabled(false);
        ActionIconButton.setMaximumSize(new java.awt.Dimension(22, 22));
        ActionIconButton.setMinimumSize(new java.awt.Dimension(22, 22));
        ActionIconButton.setName("ActionIconButton"); // NOI18N
        ActionIconButton.setPreferredSize(new java.awt.Dimension(22, 22));

        javax.swing.GroupLayout StatusBarLayout = new javax.swing.GroupLayout(StatusBar);
        StatusBar.setLayout(StatusBarLayout);
        StatusBarLayout.setHorizontalGroup(
            StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusBarLayout.createSequentialGroup()
                .addComponent(StatusMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ActionIconButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DirtyIconButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(StatusBarLayout.createSequentialGroup()
                .addComponent(ErrorMessage)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        StatusBarLayout.setVerticalGroup(
            StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusBarLayout.createSequentialGroup()
                .addComponent(ErrorMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DirtyIconButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ActionIconButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StatusMessage, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        ToolBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ToolBar.setFloatable(false);
        ToolBar.setRollover(true);

        FileNewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/New.png"))); // NOI18N
        FileNewButton.setToolTipText("New");
        FileNewButton.setFocusable(false);
        FileNewButton.setHideActionText(true);
        FileNewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FileNewButton.setMaximumSize(new java.awt.Dimension(22, 22));
        FileNewButton.setMinimumSize(new java.awt.Dimension(22, 22));
        FileNewButton.setPreferredSize(new java.awt.Dimension(22, 22));
        FileNewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FileNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileNewMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(FileNewButton);

        FileOpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Open.png"))); // NOI18N
        FileOpenButton.setToolTipText("Open");
        FileOpenButton.setFocusable(false);
        FileOpenButton.setHideActionText(true);
        FileOpenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FileOpenButton.setMaximumSize(new java.awt.Dimension(22, 22));
        FileOpenButton.setMinimumSize(new java.awt.Dimension(22, 22));
        FileOpenButton.setPreferredSize(new java.awt.Dimension(22, 22));
        FileOpenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FileOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileOpenMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(FileOpenButton);

        FileSaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Save.png"))); // NOI18N
        FileSaveButton.setToolTipText("Save");
        FileSaveButton.setFocusable(false);
        FileSaveButton.setHideActionText(true);
        FileSaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FileSaveButton.setMaximumSize(new java.awt.Dimension(22, 22));
        FileSaveButton.setMinimumSize(new java.awt.Dimension(22, 22));
        FileSaveButton.setPreferredSize(new java.awt.Dimension(22, 22));
        FileSaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FileSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileSaveMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(FileSaveButton);

        FilePrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Print.png"))); // NOI18N
        FilePrintButton.setToolTipText("Print");
        FilePrintButton.setFocusable(false);
        FilePrintButton.setHideActionText(true);
        FilePrintButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FilePrintButton.setMaximumSize(new java.awt.Dimension(22, 22));
        FilePrintButton.setMinimumSize(new java.awt.Dimension(22, 22));
        FilePrintButton.setPreferredSize(new java.awt.Dimension(22, 22));
        FilePrintButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FilePrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilePrintMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(FilePrintButton);
        ToolBar.add(jSeparator11);

        EditUndoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Undo.png"))); // NOI18N
        EditUndoButton.setToolTipText("Undo");
        EditUndoButton.setFocusable(false);
        EditUndoButton.setHideActionText(true);
        EditUndoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditUndoButton.setMaximumSize(new java.awt.Dimension(22, 22));
        EditUndoButton.setMinimumSize(new java.awt.Dimension(22, 22));
        EditUndoButton.setPreferredSize(new java.awt.Dimension(22, 22));
        EditUndoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditUndoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditUndoMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditUndoButton);

        EditRedoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Redo.png"))); // NOI18N
        EditRedoButton.setToolTipText("Redo");
        EditRedoButton.setFocusable(false);
        EditRedoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditRedoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditRedoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRedoMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditRedoButton);

        EditCutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Cut.png"))); // NOI18N
        EditCutButton.setToolTipText("Cut");
        EditCutButton.setFocusable(false);
        EditCutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditCutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditCutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCutMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditCutButton);

        EditCopyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Copy.png"))); // NOI18N
        EditCopyButton.setToolTipText("Copy");
        EditCopyButton.setFocusable(false);
        EditCopyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditCopyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCopyMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditCopyButton);

        EditPasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Paste.png"))); // NOI18N
        EditPasteButton.setToolTipText("Paste");
        EditPasteButton.setFocusable(false);
        EditPasteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditPasteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditPasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPasteMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditPasteButton);

        EditFindButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Find.png"))); // NOI18N
        EditFindButton.setToolTipText("Find");
        EditFindButton.setFocusable(false);
        EditFindButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditFindButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditFindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditFindMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditFindButton);

        EditReplaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Replace.png"))); // NOI18N
        EditReplaceButton.setToolTipText("Replace");
        EditReplaceButton.setFocusable(false);
        EditReplaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditReplaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditReplaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditReplaceMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditReplaceButton);

        EditRefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Refresh.png"))); // NOI18N
        EditRefreshButton.setToolTipText("Refresh");
        EditRefreshButton.setFocusable(false);
        EditRefreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditRefreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRefreshMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditRefreshButton);

        EditPropertiesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Properties.png"))); // NOI18N
        EditPropertiesButton.setToolTipText("Properties");
        EditPropertiesButton.setFocusable(false);
        EditPropertiesButton.setHideActionText(true);
        EditPropertiesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditPropertiesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditPropertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPropertiesMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(EditPropertiesButton);
        ToolBar.add(jSeparator12);

        HelpHelpContentsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Help.png"))); // NOI18N
        HelpHelpContentsButton.setToolTipText("Help");
        HelpHelpContentsButton.setFocusable(false);
        HelpHelpContentsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HelpHelpContentsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        HelpHelpContentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpHelpContentsMenuItemActionPerformed(evt);
            }
        });
        ToolBar.add(HelpHelpContentsButton);

        SomeStringLabel.setText("Some String:");
        SomeStringLabel.setName("SomeStringLabel"); // NOI18N

        SomeIntegerLabel.setText("Some Integer:");
        SomeIntegerLabel.setName("SomeIntegerLabel"); // NOI18N

        SomeStringTextField.setName("SomeStringTextField"); // NOI18N
        SomeStringTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SomeStringTextFieldKeyReleased(evt);
            }
        });

        SomeIntegerTextField.setName("SomeIntegerTextField"); // NOI18N
        SomeIntegerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SomeIntegerTextFieldKeyReleased(evt);
            }
        });

        SomeBooleanCheckBox.setName("SomeBooleanCheckBox"); // NOI18N
        SomeBooleanCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SomeBooleanCheckBoxItemStateChanged(evt);
            }
        });

        SomeBooleanLabel.setText("Some Boolean:");
        SomeBooleanLabel.setName("SomeBooleanLabel"); // NOI18N

        FileMenu.setMnemonic('F');
        FileMenu.setText("File");

        FileNewMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/New.png"))); // NOI18N
        FileNewMenuItem.setMnemonic('N');
        FileNewMenuItem.setText("New");
        FileNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileNewMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FileNewMenuItem);

        FileOpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        FileOpenMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Open.png"))); // NOI18N
        FileOpenMenuItem.setMnemonic('O');
        FileOpenMenuItem.setText("Open ...");
        FileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileOpenMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FileOpenMenuItem);

        FileSaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        FileSaveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Save.png"))); // NOI18N
        FileSaveMenuItem.setMnemonic('S');
        FileSaveMenuItem.setText("Save");
        FileSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileSaveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FileSaveMenuItem);

        FileSaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        FileSaveAsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/SaveAs.png"))); // NOI18N
        FileSaveAsMenuItem.setMnemonic('A');
        FileSaveAsMenuItem.setText("Save As ...");
        FileSaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileSaveAsMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FileSaveAsMenuItem);
        FileMenu.add(jSeparator1);

        FilePrintMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        FilePrintMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Print.png"))); // NOI18N
        FilePrintMenuItem.setMnemonic('P');
        FilePrintMenuItem.setText("Print");
        FilePrintMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilePrintMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FilePrintMenuItem);

        FilePrintSetupMenuItem.setMnemonic('R');
        FilePrintSetupMenuItem.setText("Print Setup...");
        FilePrintSetupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilePrintSetupMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FilePrintSetupMenuItem);
        FileMenu.add(jSeparator2);

        FileExitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        FileExitMenuItem.setMnemonic('X');
        FileExitMenuItem.setText("Exit");
        FileExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileExitMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(FileExitMenuItem);

        MainMenu.add(FileMenu);

        EditMenu.setMnemonic('E');
        EditMenu.setText("Edit");
        EditMenu.setToolTipText("");

        EditUndoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        EditUndoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Undo.png"))); // NOI18N
        EditUndoMenuItem.setText("Undo");
        EditUndoMenuItem.setName("EditUndoMenuItem"); // NOI18N
        EditUndoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditUndoMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditUndoMenuItem);

        EditRedoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        EditRedoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Redo.png"))); // NOI18N
        EditRedoMenuItem.setText("Redo");
        EditRedoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRedoMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditRedoMenuItem);
        EditMenu.add(jSeparator5);

        EditSelectAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        EditSelectAllMenuItem.setText("Select All");
        EditSelectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSelectAllMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditSelectAllMenuItem);

        EditCutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        EditCutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Cut.png"))); // NOI18N
        EditCutMenuItem.setText("Cut");
        EditCutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCutMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditCutMenuItem);

        EditCopyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        EditCopyMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Copy.png"))); // NOI18N
        EditCopyMenuItem.setText("Copy");
        EditCopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCopyMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditCopyMenuItem);

        EditPasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        EditPasteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Paste.png"))); // NOI18N
        EditPasteMenuItem.setText("Paste");
        EditPasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPasteMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditPasteMenuItem);

        EditPasteSpecialMenuItem.setText("Paste Special...");
        EditPasteSpecialMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPasteSpecialMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditPasteSpecialMenuItem);

        EditDeleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        EditDeleteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Delete.png"))); // NOI18N
        EditDeleteMenuItem.setText("Delete");
        EditDeleteMenuItem.setToolTipText("");
        EditDeleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDeleteMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditDeleteMenuItem);
        EditMenu.add(jSeparator6);

        EditFindMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        EditFindMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Find.png"))); // NOI18N
        EditFindMenuItem.setText("Find...");
        EditFindMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditFindMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditFindMenuItem);

        EditReplaceMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        EditReplaceMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Replace.png"))); // NOI18N
        EditReplaceMenuItem.setText("Replace...");
        EditReplaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditReplaceMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditReplaceMenuItem);

        EditGoToMenuItem.setText("Go To...");
        EditGoToMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditGoToMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditGoToMenuItem);
        EditMenu.add(jSeparator7);

        EditRefreshMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        EditRefreshMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Refresh.png"))); // NOI18N
        EditRefreshMenuItem.setText("Refresh");
        EditRefreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRefreshMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditRefreshMenuItem);
        EditMenu.add(jSeparator3);

        EditPreferencesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Preferences.png"))); // NOI18N
        EditPreferencesMenuItem.setText("Preferences...");
        EditPreferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPreferencesMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditPreferencesMenuItem);

        EditPropertiesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Properties.png"))); // NOI18N
        EditPropertiesMenuItem.setText("Properties...");
        EditPropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPropertiesMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(EditPropertiesMenuItem);
        EditMenu.add(jSeparator4);

        MainMenu.add(EditMenu);

        WindowMenu.setMnemonic('W');
        WindowMenu.setText("Window");
        WindowMenu.setName(""); // NOI18N

        WindowNewWindowMenuItem.setMnemonic('N');
        WindowNewWindowMenuItem.setText("New Window");
        WindowNewWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowNewWindowMenuItemActionPerformed(evt);
            }
        });
        WindowMenu.add(WindowNewWindowMenuItem);

        WindowTileMenuItem.setMnemonic('T');
        WindowTileMenuItem.setText("Tile");
        WindowTileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowTileMenuItemActionPerformed(evt);
            }
        });
        WindowMenu.add(WindowTileMenuItem);

        WindowCascadeMenuItem.setMnemonic('C');
        WindowCascadeMenuItem.setText("Cascade");
        WindowCascadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowCascadeMenuItemActionPerformed(evt);
            }
        });
        WindowMenu.add(WindowCascadeMenuItem);

        WindowArrangeAllMenuItem.setMnemonic('A');
        WindowArrangeAllMenuItem.setText("Arrange All");
        WindowArrangeAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowArrangeAllMenuItemActionPerformed(evt);
            }
        });
        WindowMenu.add(WindowArrangeAllMenuItem);
        WindowMenu.add(jSeparator8);

        WindowHideMenuItem.setMnemonic('H');
        WindowHideMenuItem.setText("Hide");
        WindowHideMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowHideMenuItemActionPerformed(evt);
            }
        });
        WindowMenu.add(WindowHideMenuItem);

        WindowShowMenuItem.setMnemonic('S');
        WindowShowMenuItem.setText("Show");
        WindowShowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowShowMenuItemActionPerformed(evt);
            }
        });
        WindowMenu.add(WindowShowMenuItem);

        MainMenu.add(WindowMenu);

        HelpMenu.setMnemonic('H');
        HelpMenu.setText("Help");

        HelpHelpContentsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        HelpHelpContentsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/Help.png"))); // NOI18N
        HelpHelpContentsMenuItem.setMnemonic('C');
        HelpHelpContentsMenuItem.setText("Help Contents");
        HelpHelpContentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpHelpContentsMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpHelpContentsMenuItem);

        HelpHelpIndexMenuItem.setMnemonic('I');
        HelpHelpIndexMenuItem.setText("Help Index");
        HelpHelpIndexMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpHelpIndexMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpHelpIndexMenuItem);

        HelpHelpOnHelpMenuItem.setMnemonic('O');
        HelpHelpOnHelpMenuItem.setText("Help On Help");
        HelpHelpOnHelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpHelpOnHelpMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpHelpOnHelpMenuItem);
        HelpMenu.add(jSeparator9);

        HelpLicenceInformationMenuItem.setMnemonic('L');
        HelpLicenceInformationMenuItem.setText("Licence Information");
        HelpLicenceInformationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpLicenceInformationMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpLicenceInformationMenuItem);

        HelpCheckForUpdatesMenuItem.setMnemonic('C');
        HelpCheckForUpdatesMenuItem.setText("Check for Updates");
        HelpCheckForUpdatesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpCheckForUpdatesMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpCheckForUpdatesMenuItem);
        HelpMenu.add(jSeparator10);

        HelpAboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ssepan/mvcform/images/About.png"))); // NOI18N
        HelpAboutMenuItem.setMnemonic('A');
        HelpAboutMenuItem.setText("About TemplateApplication ...");
        HelpAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpAboutMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpAboutMenuItem);

        MainMenu.add(HelpMenu);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
            .addComponent(StatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SomeIntegerLabel)
                    .addComponent(SomeStringLabel)
                    .addComponent(SomeBooleanLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SomeBooleanCheckBox)
                    .addComponent(SomeIntegerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SomeStringTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SomeStringTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SomeStringLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SomeIntegerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SomeIntegerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SomeBooleanCheckBox)
                    .addComponent(SomeBooleanLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 283, Short.MAX_VALUE)
                .addComponent(StatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void propertyChange(PropertyChangeEvent e)  {
        String sStatusMessage="";
        String sErrorMessage="";

        try {
            System.out.println(String.format("propertyChange %s ''%s'' ''%s''",e.getPropertyName(), e.getOldValue(), e.getNewValue()));
            //TODO:
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }

    // <editor-fold defaultstate="collapsed" desc="actions">
    private void delayFor(double dt) {
        String sStatusMessage="";
        String sErrorMessage="";
        double tc;

        try {
            tc = System.currentTimeMillis();
            do {

                //give the app time to draw the eye-candy, even if its only for an instant
              Thread.yield();
              //Common.DoEvents();

            } while (System.currentTimeMillis() < (tc + dt));
       } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }

    private Boolean Something() {
        String sStatusMessage="";
        String sErrorMessage="";
        Boolean returnValue = false;

        try {

            //give the app time to draw the eye-candy, even if its only for an instant
            Thread.yield();

            delayFor(3000);

            returnValue=true;
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this
        }
        return returnValue;
    }
    
    private void FileNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileNewMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="New...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FileNewMenuItem.getIcon());
            
            //perform sender disable in all actions
            FileNewMenuItem.setEnabled(false);
            FileNewButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "New finished.";
            }
            else {
               sStatusMessage = "New cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FileNewMenuItem.setEnabled(true);
            FileNewButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FileNewMenuItemActionPerformed

    private void FileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileOpenMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
       
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Open...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FileOpenMenuItem.getIcon());
            
            //perform sender disable in all actions
            FileOpenMenuItem.setEnabled(false);
            FileOpenButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Open finished.";
            }
            else {
               sStatusMessage = "Open cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FileOpenMenuItem.setEnabled(true);
            FileOpenButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FileOpenMenuItemActionPerformed

    private void FileSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileSaveMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Save...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FileSaveMenuItem.getIcon());
            
            //perform sender disable in all actions
            FileSaveMenuItem.setEnabled(false);
            FileSaveButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Save finished.";
            }
            else {
               sStatusMessage = "Save cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FileSaveMenuItem.setEnabled(true);
            FileSaveButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FileSaveMenuItemActionPerformed

    private void FileSaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileSaveAsMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Save As...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FileSaveAsMenuItem.getIcon());
            
            //perform sender disable in all actions
            FileSaveAsMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Save As finished.";
            }
            else {
               sStatusMessage = "Save As cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FileSaveAsMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FileSaveAsMenuItemActionPerformed

    private void FilePrintMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilePrintMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Print...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FilePrintMenuItem.getIcon());
            
            //perform sender disable in all actions
            FilePrintMenuItem.setEnabled(false);
            FilePrintButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Print finished.";
            }
            else {
               sStatusMessage = "Print cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FilePrintMenuItem.setEnabled(true);
            FilePrintButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FilePrintMenuItemActionPerformed

    private void FilePrintSetupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilePrintSetupMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Print Setup...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FilePrintSetupMenuItem.getIcon());
            
            //perform sender disable in all actions
            FilePrintSetupMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Print Setup finished.";
            }
            else {
               sStatusMessage = "Print Setup cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FilePrintSetupMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FilePrintSetupMenuItemActionPerformed

    private void FileExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileExitMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Exit...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,FileExitMenuItem.getIcon());
            
            //perform sender disable in all actions
            FileExitMenuItem.setEnabled(false);
  
            //TODO:close window/frame
            //?
//            if (Something()) {
//               sStatusMessage = "Exit finished.";//boilerplate, may not be applicable here
//            }
//            else {
//               sStatusMessage = "Exit cancelled.";
//            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            FileNewButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_FileExitMenuItemActionPerformed

    private void EditUndoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditUndoMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Undo...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditUndoMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditUndoMenuItem.setEnabled(false);
            EditUndoButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Undo finished.";
            }
            else {
               sStatusMessage = "Undo cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditUndoMenuItem.setEnabled(true);
            EditUndoButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditUndoMenuItemActionPerformed

    private void EditRedoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRedoMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Redo...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditRedoMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditRedoMenuItem.setEnabled(false);
            EditRedoButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Redo finished.";
            }
            else {
               sStatusMessage = "Redo cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditRedoMenuItem.setEnabled(true);
            EditRedoButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditRedoMenuItemActionPerformed

    private void EditSelectAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSelectAllMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Select All...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditSelectAllMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditSelectAllMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Select All finished.";
            }
            else {
               sStatusMessage = "Select All cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditSelectAllMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditSelectAllMenuItemActionPerformed

    private void EditCutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditCutMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Cut...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditCutMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditCutMenuItem.setEnabled(false);
            EditCutButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Cut finished.";
            }
            else {
               sStatusMessage = "Cut cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditCutMenuItem.setEnabled(true);
            EditCutButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditCutMenuItemActionPerformed

    private void EditCopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditCopyMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Copy...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditCopyMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditCopyMenuItem.setEnabled(false);
            EditCopyButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Copy finished.";
            }
            else {
               sStatusMessage = "Copy cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditCopyMenuItem.setEnabled(true);
            EditCopyButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditCopyMenuItemActionPerformed

    private void EditPasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPasteMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Paste...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditPasteMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditPasteMenuItem.setEnabled(false);
            EditPasteButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Paste finished.";
            }
            else {
               sStatusMessage = "Paste cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditPasteMenuItem.setEnabled(true);
            EditPasteButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditPasteMenuItemActionPerformed

    private void EditPasteSpecialMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPasteSpecialMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Paste Special...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditPasteSpecialMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditPasteSpecialMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Paste Special finished.";
            }
            else {
               sStatusMessage = "Paste Special cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditPasteSpecialMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditPasteSpecialMenuItemActionPerformed

    private void EditDeleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDeleteMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Delete...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditDeleteMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditDeleteMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Delete finished.";
            }
            else {
               sStatusMessage = "Delete cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditDeleteMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditDeleteMenuItemActionPerformed

    private void EditFindMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditFindMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Find...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditFindMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditFindMenuItem.setEnabled(false);
            EditFindButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Find finished.";
            }
            else {
               sStatusMessage = "Find cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditFindMenuItem.setEnabled(true);
            EditFindButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditFindMenuItemActionPerformed

    private void EditReplaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditReplaceMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Replace...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditReplaceMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditReplaceMenuItem.setEnabled(false);
            EditReplaceButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Replace finished.";
            }
            else {
               sStatusMessage = "Replace cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditReplaceMenuItem.setEnabled(true);
            EditReplaceButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditReplaceMenuItemActionPerformed

    private void EditGoToMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditGoToMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Go To...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditGoToMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditGoToMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Go To finished.";
            }
            else {
               sStatusMessage = "Go To cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditGoToMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditGoToMenuItemActionPerformed

    private void EditRefreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRefreshMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Refresh...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditRefreshMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditRefreshMenuItem.setEnabled(false);
            EditRefreshButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Refresh finished.";
            }
            else {
               sStatusMessage = "Refresh cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditRefreshMenuItem.setEnabled(true);
            EditRefreshButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditRefreshMenuItemActionPerformed

    private void EditPreferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPreferencesMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Preferences...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditPreferencesMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditPreferencesMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Preferences finished.";
            }
            else {
               sStatusMessage = "Preferences cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditPreferencesMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditPreferencesMenuItemActionPerformed

    private void EditPropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPropertiesMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Properties...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,EditPropertiesMenuItem.getIcon());
            
            //perform sender disable in all actions
            EditPropertiesMenuItem.setEnabled(false);
            EditPropertiesButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Properties finished.";
            }
            else {
               sStatusMessage = "Properties cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            EditPropertiesMenuItem.setEnabled(true);
            EditPropertiesButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_EditPropertiesMenuItemActionPerformed

    private void WindowNewWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowNewWindowMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="New Window...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,WindowNewWindowMenuItem.getIcon());
            
            //perform sender disable in all actions
            WindowNewWindowMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "New Window finished.";
            }
            else {
               sStatusMessage = "New Window cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            WindowNewWindowMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_WindowNewWindowMenuItemActionPerformed

    private void WindowTileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowTileMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Tile...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,WindowTileMenuItem.getIcon());
            
            //perform sender disable in all actions
            WindowTileMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Tile finished.";
            }
            else {
               sStatusMessage = "Tile cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            WindowTileMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_WindowTileMenuItemActionPerformed

    private void WindowCascadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowCascadeMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Cascade...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,WindowCascadeMenuItem.getIcon());
            
            //perform sender disable in all actions
            WindowCascadeMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Cascade finished.";
            }
            else {
               sStatusMessage = "Cascade cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            WindowCascadeMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_WindowCascadeMenuItemActionPerformed

    private void WindowArrangeAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowArrangeAllMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Arrange All...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,WindowArrangeAllMenuItem.getIcon());
            
            //perform sender disable in all actions
            WindowArrangeAllMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Arrange All finished.";
            }
            else {
               sStatusMessage = "Arrange All cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            WindowArrangeAllMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_WindowArrangeAllMenuItemActionPerformed

    private void WindowHideMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowHideMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Hide...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,WindowHideMenuItem.getIcon());
            
            //perform sender disable in all actions
            WindowHideMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Hide finished.";
            }
            else {
               sStatusMessage = "Hide cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            WindowHideMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_WindowHideMenuItemActionPerformed

    private void WindowShowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowShowMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Show...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,WindowShowMenuItem.getIcon());
            
            //perform sender disable in all actions
            WindowShowMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Show finished.";
            }
            else {
               sStatusMessage = "Show cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            WindowShowMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_WindowShowMenuItemActionPerformed

    private void HelpHelpContentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpHelpContentsMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Help Contents...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,HelpHelpContentsMenuItem.getIcon());
            
            //perform sender disable in all actions
            HelpHelpContentsMenuItem.setEnabled(false);
            HelpHelpContentsButton.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Help Contents finished.";
            }
            else {
               sStatusMessage = "Help Contents cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            HelpHelpContentsMenuItem.setEnabled(true);
            HelpHelpContentsButton.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_HelpHelpContentsMenuItemActionPerformed

    private void HelpHelpIndexMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpHelpIndexMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Help Index...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,HelpHelpIndexMenuItem.getIcon());
            
            //perform sender disable in all actions
            HelpHelpIndexMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Help Index finished.";
            }
            else {
               sStatusMessage = "Help Index cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            HelpHelpIndexMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_HelpHelpIndexMenuItemActionPerformed

    private void HelpHelpOnHelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpHelpOnHelpMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Help On Help...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,HelpHelpOnHelpMenuItem.getIcon());
            
            //perform sender disable in all actions
            HelpHelpOnHelpMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Help On Help finished.";
            }
            else {
               sStatusMessage = "Help On Help cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            HelpHelpOnHelpMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_HelpHelpOnHelpMenuItemActionPerformed

    private void HelpLicenceInformationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpLicenceInformationMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Licence Information...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,HelpLicenceInformationMenuItem.getIcon());
            
            //perform sender disable in all actions
            HelpLicenceInformationMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Licence Information finished.";
            }
            else {
               sStatusMessage = "Licence Information cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            HelpLicenceInformationMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_HelpLicenceInformationMenuItemActionPerformed

    private void HelpCheckForUpdatesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpCheckForUpdatesMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            //clear status, error messages at beginning of every action
           sStatusMessage="Check For Updates...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,HelpCheckForUpdatesMenuItem.getIcon());
            
            //perform sender disable in all actions
            HelpCheckForUpdatesMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "Check For Updates finished.";
            }
            else {
               sStatusMessage = "Check For Updates cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            HelpCheckForUpdatesMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_HelpCheckForUpdatesMenuItemActionPerformed

    private void HelpAboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpAboutMenuItemActionPerformed
        String sStatusMessage="";
        String sErrorMessage="";
        
        try {
            
            //clear status, error messages at beginning of every action
           sStatusMessage="About...";
           sErrorMessage="";
            
            //use progress bar (marquee) with action icon (where available) in status bar
            ViewModelBase.StartProgressBar(sStatusMessage,sErrorMessage, true,false,0, 100,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar,HelpAboutMenuItem.getIcon());
            
            //perform sender disable in all actions
            HelpAboutMenuItem.setEnabled(false);
  
            if (Something()) {
               sStatusMessage = "About finished.";
            }
            else {
               sStatusMessage = "About cancelled.";
            }
        }
        catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            ViewModelBase.StopProgressBar("", sErrorMessage, StatusMessage, ErrorMessage, ProgressBar, ActionIconButton, StatusBar);
            Log.write(ex,Level.ALL);
        }
        finally {
            //always do something

            //perform sender enable in all actions
            HelpAboutMenuItem.setEnabled(true);

            ViewModelBase.StopProgressBar(sStatusMessage, null,StatusMessage, ErrorMessage,ProgressBar,ActionIconButton, StatusBar);
        }
    }//GEN-LAST:event_HelpAboutMenuItemActionPerformed

    private void SomeStringTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SomeStringTextFieldKeyReleased
        String sStatusMessage="";
        String sErrorMessage="";
        try {
            System.out.println("SomeStringTextFieldKeyReleased");
            if (objModel != null)  {
                objModel.setSomeStringField(SomeStringTextField.getText());
            } 
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }//GEN-LAST:event_SomeStringTextFieldKeyReleased

    private void SomeIntegerTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SomeIntegerTextFieldKeyReleased
        String sStatusMessage="";
        String sErrorMessage="";
        try {
            System.out.println("SomeIntegerTextFieldKeyReleased");
            if (objModel != null)  {
                objModel.setSomeIntegerField(Integer.parseInt(SomeIntegerTextField.getText()));
            } 
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }//GEN-LAST:event_SomeIntegerTextFieldKeyReleased

    private void SomeBooleanCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SomeBooleanCheckBoxItemStateChanged
        String sStatusMessage="";
        String sErrorMessage="";
        try {
            System.out.println("SomeBooleanCheckBoxItemStateChanged");
            if (objModel != null)  {
                objModel.setSomeBooleanField(SomeBooleanCheckBox.isSelected());
            } 
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }//GEN-LAST:event_SomeBooleanCheckBoxItemStateChanged
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                                                    
        String sStatusMessage="";
        String sErrorMessage="";

        try {
            System.out.println("formWindowOpened begin");
            objModel = new MvcModel();
            objModel.addPropertyChangeListener(this);
            System.out.println("formWindowOpened end");
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }                                                                  

    private void formWindowClosed(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosed
    {//GEN-HEADEREND:event_formWindowClosed
        String sStatusMessage="";
        String sErrorMessage="";

        try {
            MainView.returnValue = RETURNCODE_COMPLETE;  //return Complete code
            System.exit(returnValue);
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        String sStatusMessage="";
        String sErrorMessage="";

        try {
            System.out.println("formWindowClosing begin");
            objModel.removePropertyChangeListener(this);
            objModel = null;
            System.out.println("formWindowClosing end");
        } catch (Exception ex) {
            sErrorMessage=ex.getMessage();
            ErrorMessage.setText(sErrorMessage);
            Log.write(ex,Level.ALL);
        } finally {
            //always do this

        }
    }//GEN-LAST:event_formWindowClosing

// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Declarations">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActionIconButton;
    private javax.swing.JButton DirtyIconButton;
    private javax.swing.JButton EditCopyButton;
    private javax.swing.JMenuItem EditCopyMenuItem;
    private javax.swing.JButton EditCutButton;
    private javax.swing.JMenuItem EditCutMenuItem;
    private javax.swing.JMenuItem EditDeleteMenuItem;
    private javax.swing.JButton EditFindButton;
    private javax.swing.JMenuItem EditFindMenuItem;
    private javax.swing.JMenuItem EditGoToMenuItem;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JButton EditPasteButton;
    private javax.swing.JMenuItem EditPasteMenuItem;
    private javax.swing.JMenuItem EditPasteSpecialMenuItem;
    private javax.swing.JMenuItem EditPreferencesMenuItem;
    public javax.swing.JButton EditPropertiesButton;
    public javax.swing.JMenuItem EditPropertiesMenuItem;
    private javax.swing.JButton EditRedoButton;
    private javax.swing.JMenuItem EditRedoMenuItem;
    private javax.swing.JButton EditRefreshButton;
    private javax.swing.JMenuItem EditRefreshMenuItem;
    private javax.swing.JButton EditReplaceButton;
    private javax.swing.JMenuItem EditReplaceMenuItem;
    private javax.swing.JMenuItem EditSelectAllMenuItem;
    public javax.swing.JButton EditUndoButton;
    public javax.swing.JMenuItem EditUndoMenuItem;
    private javax.swing.JLabel ErrorMessage;
    public javax.swing.JMenuItem FileExitMenuItem;
    private javax.swing.JMenu FileMenu;
    public javax.swing.JButton FileNewButton;
    public javax.swing.JMenuItem FileNewMenuItem;
    public javax.swing.JButton FileOpenButton;
    public javax.swing.JMenuItem FileOpenMenuItem;
    public javax.swing.JButton FilePrintButton;
    public javax.swing.JMenuItem FilePrintMenuItem;
    private javax.swing.JMenuItem FilePrintSetupMenuItem;
    public javax.swing.JMenuItem FileSaveAsMenuItem;
    public javax.swing.JButton FileSaveButton;
    public javax.swing.JMenuItem FileSaveMenuItem;
    public javax.swing.JMenuItem HelpAboutMenuItem;
    private javax.swing.JMenuItem HelpCheckForUpdatesMenuItem;
    private javax.swing.JButton HelpHelpContentsButton;
    private javax.swing.JMenuItem HelpHelpContentsMenuItem;
    private javax.swing.JMenuItem HelpHelpIndexMenuItem;
    private javax.swing.JMenuItem HelpHelpOnHelpMenuItem;
    private javax.swing.JMenuItem HelpLicenceInformationMenuItem;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JCheckBox SomeBooleanCheckBox;
    private javax.swing.JLabel SomeBooleanLabel;
    private javax.swing.JLabel SomeIntegerLabel;
    private javax.swing.JTextField SomeIntegerTextField;
    private javax.swing.JLabel SomeStringLabel;
    private javax.swing.JTextField SomeStringTextField;
    private javax.swing.JPanel StatusBar;
    private javax.swing.JLabel StatusMessage;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JMenuItem WindowArrangeAllMenuItem;
    private javax.swing.JMenuItem WindowCascadeMenuItem;
    private javax.swing.JMenuItem WindowHideMenuItem;
    private javax.swing.JMenu WindowMenu;
    private javax.swing.JMenuItem WindowNewWindowMenuItem;
    private javax.swing.JMenuItem WindowShowMenuItem;
    private javax.swing.JMenuItem WindowTileMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

//NOTE: this is done in Program.java instead
//    /**
//     * main() is entry point, and calls MainView ctor() as part of running view.
//     * @param args the command line arguments
//     */
//    public static void main(String args[])
//    {
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//        */
//       try
//       {
//           for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
//           {
//               if ("Windows".equals(info.getName()))
//               {
//                   UIManager.setLookAndFeel(info.getClassName());
//                   break;
//               }
//           }
//       }
//       catch (ClassNotFoundException |                   
//              InstantiationException |                   
//              IllegalAccessException |                   
//              UnsupportedLookAndFeelException ex)
//       {
//           Log.write(ex, Level.SEVERE);
//       }
//        //</editor-fold>
//
//        // <editor-fold defaultstate="collapsed" desc="main view">
//        /* Create and display the form */
//        EventQueue.invokeLater(
//            new Runnable()
//            {
//                @Override
//                public void run()
//                {
//                    new MainView().setVisible(true);
//                }
//            }
//        );
//
//        // </editor-fold>
//    }
}
